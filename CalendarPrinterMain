//////////////// FILE HEADER (INCLUDE IN EVERY FILE) //////////////////////////
//
// Title:   Calendar Printer, user specifies starting month/year and number of months
// Files:   CalendarPrinter.java, CalendarTester.java
// Course:  CS300, Spring, 2020
//
// Author:  Zach Austin
// Email:   zaustin@wisc.edu
// Lecturer's Name: Gary Dahl
//
//////////// PAIR PROGRAMMING (MAY SKIP WHEN WORKING INDIVIDUALLY) ////////////
//
// Partner Name:    N/A
// Partner Email:   N/A
// Partner Lecturer's Name: N/A
// 
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//   ___ Write-up states that pair programming is allowed for this assignment.
//   ___ We have both read and understood the course Pair Programming Policy.
//   ___ We have registered our team prior to the team registration deadline.
//
///////////////////////// ALWAYS CREDIT OUTSIDE HELP //////////////////////////
//
// Students who get help from sources other than their partner and the course 
// staff must fully acknowledge and credit those sources here.  If you did not
// receive any help of any kind from outside sources, explicitly indicate NONE
// next to each of the labels below.
//
// Persons:         (identify each person and describe their help in detail)
// Online Sources:  (identify each URL and describe their assistance in detail)
//
///////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;
import java.util.Scanner;

public class CalendarPrinter {

	/**
	 * Calculates the number of centuries (rounded down) between year 0 and the
	 * specified year. For example, the year 2034 has the century index of 20 (as do
	 * the other years 2000-2099).
	 * 
	 * @param year to compute the century offset for
	 * @return number of centuries between year 0 and the specified year
	 */
	public static int fullCenturiesContained(Year year) {
		return year.intValue() / 100;
	}

	/**
	 * Calculates the number of years between the specified year and the first year
	 * of its century. For example, the year 2034 has the offset within its century
	 * of 34 (as do 1234 and 9999934).
	 * 
	 * @param year to compute the offset within century for
	 * @return number of years between the specified year and the first year of
	 *         century
	 */
	public static int yearOffsetWithinCentury(Year year) {
		return (year.intValue() - (fullCenturiesContained(year) * 100));
	}

	/**
	 * This method computes whether the specified year is a leap year or not.
	 * 
	 * @param year is the year is being checked for leap-year-ness
	 * @return true when the specified year is a leap year, and false otherwise
	 */
	public static boolean isLeapYear(Year year) {
		if (year.intValue() % 4 != 0) {
			return false;
		} else if (year.intValue() % 100 != 0) {
			return true;
		} else if (year.intValue() % 400 != 0) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * Calculates the number of days in the specified month, while taking into
	 * consideration whether or not the specified month is in a leap year. Note:
	 * that this is calculated based on the month's monthOfYear and year, and is NOT
	 * retrieved from the month's getDayCount() method. This is because this method
	 * is used to generate the day objects that are stored within each month.
	 * 
	 * @param month to determine the number of days within (within its year)
	 * @return the number of days in the specified month (between 28-31)
	 */
	public static int numberOfDaysInMonth(Month month) {
		if (isLeapYear(month.getYear())) {
			if (month.getMonthOfYear() == MonthOfYear.February) {
				return 29;
			}
		}
		switch (month.getMonthOfYear()) {
		case January:
			return 31;
		case February:
			return 28;
		case March:
			return 31;
		case April:
			return 30;
		case May:
			return 31;
		case June:
			return 30;
		case July:
			return 31;
		case August:
			return 31;
		case September:
			return 30;
		case October:
			return 31;
		case November:
			return 30;
		case December:
			return 31;
		default:
			return -1;
		}
	}

	/**
	 * Calculates which day of the week the first day of the specified month falls
	 * on. Note: that this is calculated based on the month's monthOfYear and year,
	 * and is NOT retrieved from the month's getDayByDate(1) day. This is because
	 * this method is used to generate the day objects that are stored within each
	 * month.
	 * 
	 * @param month within which we are calculate the day of week for the first day
	 * @return DayOfWeek corresponding to the first day within the specified month
	 */
	public static DayOfWeek calcFirstDayOfWeekInMonth(Month month) {
		int m = 0;
		int monthNum = month.getYear().intValue();
		switch (month.getMonthOfYear()) {
		case January:
			m = 13;
			monthNum--;
			break;
		case February:
			m = 14;
			monthNum--;
			break;
		case March:
			m = 3;
			break;
		case April:
			m = 4;
			break;
		case May:
			m = 5;
			break;
		case June:
			m = 6;
			break;
		case July:
			m = 7;
			break;
		case August:
			m = 8;
			break;
		case September:
			m = 9;
			break;
		case October:
			m = 10;
			break;
		case November:
			m = 11;
			break;
		case December:
			m = 12;
			break;
		}
		int k = monthNum % 100;
		int j = monthNum / 100;
		int h = (1 + (int) ((13 * (m + 1)) / 5) + k + (int) (k / 4) + (int) (j / 4) + 5 * j) % 7;
		switch (h) {
		case 0:
			return DayOfWeek.Saturday;
		case 1:
			return DayOfWeek.Sunday;
		case 2:
			return DayOfWeek.Monday;
		case 3:
			return DayOfWeek.Tuesday;
		case 4:
			return DayOfWeek.Wednesday;
		case 5:
			return DayOfWeek.Thursday;
		case 6:
			return DayOfWeek.Friday;
		default:
			return DayOfWeek.Saturday;
		}
	}

	/**
	 * Calculates the day of the week that follows the specified day of week. For
	 * example, Thursday comes after Wednesday, and Monday comes after Sunday.
	 * 
	 * @param dayBefore is the day of week that comes before the day of week
	 *                  returned
	 * @return day of week that comes after dayBefore
	 */
	public static DayOfWeek dayOfWeekAfter(DayOfWeek dayBefore) {
		switch (dayBefore) {
		case Monday:
			return DayOfWeek.Tuesday;
		case Tuesday:
			return DayOfWeek.Wednesday;
		case Wednesday:
			return DayOfWeek.Thursday;
		case Thursday:
			return DayOfWeek.Friday;
		case Friday:
			return DayOfWeek.Saturday;
		case Saturday:
			return DayOfWeek.Sunday;
		case Sunday:
			return DayOfWeek.Monday;
		default:
			return DayOfWeek.Friday;
		}
	}

	/**
	 * Calculates the month of the year that follows the specified month. For
	 * example, July comes after June, and January comes after December.
	 * 
	 * @param monthBefore is the month that comes before the month that is returned
	 * @return month of year that comes after monthBefore
	 */
	public static MonthOfYear monthOfYearAfter(MonthOfYear monthBefore) {
		switch (monthBefore) {
		case January:
			return MonthOfYear.February;
		case February:
			return MonthOfYear.March;
		case March:
			return MonthOfYear.April;
		case April:
			return MonthOfYear.May;
		case May:
			return MonthOfYear.June;
		case June:
			return MonthOfYear.July;
		case July:
			return MonthOfYear.August;
		case August:
			return MonthOfYear.September;
		case September:
			return MonthOfYear.October;
		case October:
			return MonthOfYear.November;
		case November:
			return MonthOfYear.December;
		case December:
			return MonthOfYear.January;
		default:
			return MonthOfYear.April;
		}
	}

	/**
	 * Creates a new month object and fully initializes with its corresponding days.
	 * 
	 * @param monthOfYear which month of the year this new month represents
	 * @param year        in which this month is a part
	 * @return reference to the newly created month object
	 */
	public static Month createNewMonth(MonthOfYear monthOfYear, Year year) {
		Month newMonth = new Month(monthOfYear, year);
		newMonth.addDay(new Day(calcFirstDayOfWeekInMonth(newMonth), 1, newMonth));
		for (int i = 1; i <= numberOfDaysInMonth(newMonth) - 1; i++) {
			newMonth.addDay(new Day(dayOfWeekAfter(newMonth.getDayByDate(i).getDayOfWeek()), i + 1, newMonth));
		}
		return newMonth;
	}

	/**
	 * Prints the contents of the specified month object in calendar form. This
	 * printout should begin with the Month an year of the month. The next line
	 * should contain the three letter abbreviations for the seven days of the week.
	 * And then the dates of each day of that month should follow: one week per
	 * line, with periods in positions of days that are a part of the month before
	 * or after. For example, January 2020 should be printed as follows:
	 *
	 * January 2020 MON TUE WED THU FRI SAT SUN . . 1 2 3 4 5 6 7 8 9 10 11 12 13 14
	 * 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 . .
	 *
	 * @param month which is to be printed by this method
	 */
	public static void printMonth(Month month) {
		System.out.println(month.getMonthOfYear() + " " + month.getYear());
		System.out.println("MON TUE WED THU FRI SAT SUN");
		for (int i = 1; i <= numberOfDaysInMonth(month); i++) {
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday && i == 1) {
				System.out.print(".   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday && i == 1) {
				System.out.print(".   .   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday && i == 1) {
				System.out.print(".   .   .   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday && i == 1) {
				System.out.print(".   .   .   .   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday && i == 1) {
				System.out.print(".   .   .   .   .   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday && i == 1) {
				System.out.print(".   .   .   .   .   .   ");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Monday && (i - 1) % 7 == 0 && i != 1) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday && (i == 7 || (i % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday && (i == 6 || ((i + 1) % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday && (i == 5 || ((i + 2) % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday && (i == 4 || ((i + 3) % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday && (i == 3 || ((i + 4) % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday && (i == 2 || ((i + 5) % 7 == 0 && i != 1))) {
				System.out.println();
			}
			if (i >= 10) {
				System.out.print(i + "  ");
			} else {
				System.out.print(i + "   ");
			}
		}
		if (numberOfDaysInMonth(month) == 28) {
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday) {
				System.out.println(".   .   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday) {
				System.out.println(".   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday) {
				System.out.println(".   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday) {
				System.out.println(".   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday) {
				System.out.println(".   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday) {
				System.out.println(".");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Monday) {
				System.out.println();
			}
		}
		if (numberOfDaysInMonth(month) == 29) {
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Monday) {
				System.out.println(".   .   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday) {
				System.out.println(".   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday) {
				System.out.println(".   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday) {
				System.out.println(".   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday) {
				System.out.println(".   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday) {
				System.out.println(".");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday) {
				System.out.println();
			}
		}
		if (numberOfDaysInMonth(month) == 30) {
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Monday) {
				System.out.println(".   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday) {
				System.out.println(".   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday) {
				System.out.println(".   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday) {
				System.out.println(".   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday) {
				System.out.println(".");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday) {
				System.out.println(".   .   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday) {
				System.out.println();
			}
		}
		if (numberOfDaysInMonth(month) == 31) {
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Monday) {
				System.out.println(".   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Tuesday) {
				System.out.println(".   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Wednesday) {
				System.out.println(".   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Thursday) {
				System.out.println(".");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Sunday) {
				System.out.println(".   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Saturday) {
				System.out.println(".   .   .   .   .   .");
			}
			if (calcFirstDayOfWeekInMonth(month) == DayOfWeek.Friday) {
				System.out.println();
			}
		}
	}

	/**
	 * Creates an array list of months that are initialized with their full
	 * complement of days. Prints out each of these months in calendar form, and
	 * then returns the resulting ArrayList.
	 * 
	 * @param month of the year for the first month that is created and printed
	 * @param year  that the first month created and printed is a part of
	 * @param count is the total number of sequential months created and printed
	 * @return the array list of months that this method generates and prints.
	 */
	public static ArrayList<Month> createAndPrintMonths(MonthOfYear month, Year year, int count) {
		ArrayList<Month> listOfMonths = new ArrayList<Month>();
		if (count == 0) {
			return listOfMonths;
		}
		listOfMonths.add(createNewMonth(month, year));
		for (int i = 0; i < count - 1; i++) {
			if (monthOfYearAfter(listOfMonths.get(i).getMonthOfYear()) == MonthOfYear.January) {
				year = new Year(year.intValue() + 1);
			}
			month = monthOfYearAfter(listOfMonths.get(i).getMonthOfYear());
			listOfMonths.add(createNewMonth(month, year));
		}
		for (int i = 0; i < count; i++) {
			printMonth(listOfMonths.get(i));
			System.out.println();
		}
		return listOfMonths;
	}

	/**
	 * Driver for the CalendarPrinter Application. This program asks the user to
	 * enter an initial month, an initial year, and the total number of months to
	 * create and display in calendar form.
	 * 
	 * @param args is not used by this program
	 */
	public static void main(String[] args) {
		// print welcome message
	 Scanner in = new Scanner(System.in);
	 System.out.println("Welcome to the Calendar Printer.");
	 System.out.println("~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~");
	 // read input from the user
	 System.out.print("Enter the month to begin calendar: ");
	 String monthString = in.nextLine().trim();
	 System.out.print("Enter the year to begin calendar: ");
	 String yearString = in.nextLine().trim();
	 System.out.print("Enter the number of months to include in this calendar: ");
	 String countString = in.nextLine().trim();
	 // convert user input into usable form
	 monthString = monthString.substring(0,3).toUpperCase();
	 MonthOfYear month = null;
	 for(int i=0;i<MonthOfYear.values().length;i++)

	if(monthString.equals(MonthOfYear.values()[i].name().substring(0,3).toUpperCase()))
	 month = MonthOfYear.values()[i];
	 Year year = new Year(Integer.parseInt(yearString.trim()));
	 int count = Integer.parseInt(countString.trim());
	 // create months and display them in calendar form
	 System.out.println();
	 createAndPrintMonths(month,year,count);
	 // display thank you message
	 System.out.println("~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~");
	 System.out.println("Thanks, and have a nice day.");
	 in.close();
	}

}
